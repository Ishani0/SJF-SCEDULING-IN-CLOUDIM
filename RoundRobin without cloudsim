package sjfcode;   

import java.util.*;

class Cloudlet {
    int id;
    int length;          // burst time
    int remainingTime;
    int startTime = -1;
    int finishTime;
    int assignedVm;

    public Cloudlet(int id, int length) {
        this.id = id;
        this.length = length;
        this.remainingTime = length;
    }
}

class VM {
    int id;

    public VM(int id) {
        this.id = id;
    }
}

public class CloudRoundRobin {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input
        System.out.print("Enter number of Cloudlets: ");
        int n = sc.nextInt();
        System.out.print("Enter number of VMs: ");
        int m = sc.nextInt();
        System.out.print("Enter Time Quantum: ");
        int quantum = sc.nextInt();

        List<Cloudlet> cloudlets = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            System.out.print("Enter length for Cloudlet " + i + ": ");
            int len = sc.nextInt();
            cloudlets.add(new Cloudlet(i, len));
        }

        List<VM> vms = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            vms.add(new VM(i));
        }

        // Round Robin Scheduling across VMs
        Queue<Cloudlet> queue = new LinkedList<>(cloudlets);
        int time = 0;
        int vmIndex = 0;

        System.out.println("\n===== Cloudlet Execution (RR) =====");
        while (!queue.isEmpty()) {
            Cloudlet c = queue.poll();
            VM v = vms.get(vmIndex);

            if (c.startTime == -1) {
                c.startTime = time;
            }

            int executed = Math.min(quantum, c.remainingTime);
            System.out.println("Time " + time + " -> Cloudlet " + c.id +
                    " runs on VM " + v.id + " for " + executed + " units");

            time += executed;
            c.remainingTime -= executed;
            c.assignedVm = v.id;

            if (c.remainingTime > 0) {
                queue.add(c); // put it back if unfinished
            } else {
                c.finishTime = time;
            }

            vmIndex = (vmIndex + 1) % m; // rotate across VMs
        }

        // Print Results
        System.out.println("\n===== Final Cloudlet Results =====");
        System.out.printf("%-10s%-10s%-10s%-10s%-10s\n",
                "Cloudlet", "Length", "VM", "Start", "Finish");
        for (Cloudlet c : cloudlets) {
            System.out.printf("%-10d%-10d%-10d%-10d%-10d\n",
                    c.id, c.length, c.assignedVm, c.startTime, c.finishTime);
        }

        sc.close();
    }
}
