package sjfcode;

import org.cloudbus.cloudsim.*;
import org.cloudbus.cloudsim.core.CloudSim;
import org.cloudbus.cloudsim.provisioners.PeProvisionerSimple;
import org.cloudbus.cloudsim.provisioners.RamProvisionerSimple;
import org.cloudbus.cloudsim.provisioners.BwProvisionerSimple;

import java.util.*;

// Custom Broker for SJF Scheduling
class SJFBroker extends DatacenterBroker {
    public SJFBroker(String name) throws Exception {
        super(name);
    }

    @Override
    public void submitCloudletList(List<? extends Cloudlet> list) {
        // Sort cloudlets by length (Shortest Job First)
        list.sort(Comparator.comparingLong(Cloudlet::getCloudletLength));

        System.out.println("Cloudlets reordered using SJF (by length):");
        for (Cloudlet c : list) {
            System.out.println("Cloudlet ID: " + c.getCloudletId() +
                    " Length: " + c.getCloudletLength());
        }

        super.submitCloudletList(list);
    }
}

public class sjfcode {

    public static void main(String[] args) {
        try {
            System.out.println("Starting CloudSim SJF Example...");

            // Step 1: Initialize CloudSim
            int numUsers = 1;
            Calendar calendar = Calendar.getInstance();
            boolean traceFlag = false;
            CloudSim.init(numUsers, calendar, traceFlag);

            // Step 2: Create Datacenter
            Datacenter datacenter0 = createDatacenter("Datacenter_0");

            // Step 3: Create SJF Broker
            SJFBroker broker = new SJFBroker("SJF_Broker");
            int brokerId = broker.getId();

            // Step 4: Create VMs (3 VMs)
            List<Vm> vmList = new ArrayList<>();
            int mips = 1000;
            int ram = 512;
            long bw = 1000;
            long size = 10000;
            int pesNumber = 1;

            for (int i = 0; i < 3; i++) {
                // Use SpaceShared so cloudlets run sequentially
                Vm vm = new Vm(i, brokerId, mips, pesNumber, ram, bw, size,
                        "Xen", new CloudletSchedulerSpaceShared());
                vmList.add(vm);
            }
            broker.submitVmList(vmList);

            // Step 5: Create 10 Cloudlets with varying lengths
            List<Cloudlet> cloudletList = new ArrayList<>();
            long[] lengths = {20000, 40000, 10000, 60000, 15000,
                              25000, 30000, 5000, 45000, 35000};
            long fileSize = 300;
            long outputSize = 300;
            UtilizationModel utilizationModel = new UtilizationModelFull();

            for (int i = 0; i < lengths.length; i++) {
                Cloudlet cloudlet = new Cloudlet(i, lengths[i], pesNumber,
                        fileSize, outputSize,
                        utilizationModel, utilizationModel, utilizationModel);
                cloudlet.setUserId(brokerId);
                cloudletList.add(cloudlet);
            }

            broker.submitCloudletList(cloudletList);

            // Step 6: Start Simulation
            CloudSim.startSimulation();
            List<Cloudlet> newList = broker.getCloudletReceivedList();
            CloudSim.stopSimulation();

            // Step 7: Print results
            printCloudletList(newList);
            System.out.println("Simulation finished!");

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Unexpected error");
        }
    }

    private static Datacenter createDatacenter(String name) {
        List<Host> hostList = new ArrayList<>();

        List<Pe> peList = new ArrayList<>();
        int mips = 1000;
        peList.add(new Pe(0, new PeProvisionerSimple(mips)));
        peList.add(new Pe(1, new PeProvisionerSimple(mips)));

        int hostId = 0;
        int ram = 2048;
        long storage = 1000000;
        int bw = 10000;

        hostList.add(new Host(hostId,
                new RamProvisionerSimple(ram),
                new BwProvisionerSimple(bw),
                storage,
                peList,
                new VmSchedulerTimeShared(peList)));

        String arch = "x86";
        String os = "Linux";
        String vmm = "Xen";

        DatacenterCharacteristics characteristics = new DatacenterCharacteristics(
                arch, os, vmm, hostList,
                10.0, 3.0, 0.05, 0.001, 0.0);

        Datacenter datacenter = null;
        try {
            datacenter = new Datacenter(name, characteristics,
                    new VmAllocationPolicySimple(hostList),
                    new LinkedList<Storage>(), 0);
        } catch (Exception e) {
            e.printStackTrace();
        }

        return datacenter;
    }

    private static void printCloudletList(List<Cloudlet> list) {
        String indent = "    ";
        System.out.println("========== CLOUDLET EXECUTION RESULTS ==========");
        System.out.println("ID" + indent + "STATUS" + indent +
                "DataCenter" + indent + "VM" +
                indent + "Time" + indent + "Start" + indent + "Finish" +
                indent + "Length");

        for (Cloudlet cloudlet : list) {
            System.out.print(cloudlet.getCloudletId() + indent);
            if (cloudlet.getStatus() == Cloudlet.SUCCESS) {
                System.out.print("SUCCESS");
                System.out.println(indent + cloudlet.getResourceId() +
                        indent + cloudlet.getVmId() +
                        indent + cloudlet.getActualCPUTime() +
                        indent + cloudlet.getExecStartTime() +
                        indent + cloudlet.getFinishTime() +
                        indent + cloudlet.getCloudletLength());
            }
        }
    }
}

